require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe CupsController do

  def mock_cup(stubs={})
    @mock_cup ||= mock_model(Cup, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all cups as @cups" do
      Cup.stub(:all) { [mock_cup] }
      get :index
      assigns(:cups).should eq([mock_cup])
    end
  end

  describe "GET show" do
    it "assigns the requested cup as @cup" do
      Cup.stub(:find).with("37") { mock_cup }
      get :show, :id => "37"
      assigns(:cup).should be(mock_cup)
    end
  end

  describe "GET new" do
    it "assigns a new cup as @cup" do
      Cup.stub(:new) { mock_cup }
      get :new
      assigns(:cup).should be(mock_cup)
    end
  end

  describe "GET edit" do
    it "assigns the requested cup as @cup" do
      Cup.stub(:find).with("37") { mock_cup }
      get :edit, :id => "37"
      assigns(:cup).should be(mock_cup)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created cup as @cup" do
        Cup.stub(:new).with({'these' => 'params'}) { mock_cup(:save => true) }
        post :create, :cup => {'these' => 'params'}
        assigns(:cup).should be(mock_cup)
      end

      it "redirects to the created cup's user plot" do
        Cup.stub(:new) { mock_cup(:drank_by => :somebody, :save => true) }
        post :create, :cup => {:drank_by => :somebody}
        response.should redirect_to(user_plot_url(:drank_by => :somebody))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved cup as @cup" do
        Cup.stub(:new).with({'these' => 'params'}) { mock_cup(:save => false) }
        post :create, :cup => {'these' => 'params'}
        assigns(:cup).should be(mock_cup)
      end

      it "re-renders the 'new' template" do
        Cup.stub(:new) { mock_cup(:save => false) }
        post :create, :cup => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested cup" do
        Cup.stub(:find).with("37") { mock_cup }
        mock_cup.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :cup => {'these' => 'params'}
      end

      it "assigns the requested cup as @cup" do
        Cup.stub(:find) { mock_cup(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:cup).should be(mock_cup)
      end

      it "redirects to the cup" do
        Cup.stub(:find) { mock_cup(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(cup_url(mock_cup))
      end
    end

    describe "with invalid params" do
      it "assigns the cup as @cup" do
        Cup.stub(:find) { mock_cup(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:cup).should be(mock_cup)
      end

      it "re-renders the 'edit' template" do
        Cup.stub(:find) { mock_cup(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested cup" do
      Cup.stub(:find).with("37") { mock_cup }
      mock_cup.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the cups list" do
      Cup.stub(:find) { mock_cup }
      delete :destroy, :id => "1"
      response.should redirect_to(cups_url)
    end
  end

end
